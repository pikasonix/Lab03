package hust.soict.dsai.aims;

import java.util.Scanner;
import hust.soict.dsai.aims.cart.Cart;
import hust.soict.dsai.aims.media.*;
import hust.soict.dsai.aims.store.Store;

public class Aims {
    private static final Store store = new Store();
    private static final Cart cart = new Cart();
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        initSetup();
        showMenu();
        scanner.close();
    }

    private static void showMenu() {
        int option;
        do {
            System.out.println("AIMS: ");
            System.out.println("--------------------------------");
            System.out.println("1. View store");
            System.out.println("2. Update store");
            System.out.println("3. See current cart");
            System.out.println("0. Exit");
            System.out.println("--------------------------------");
            System.out.println("Please choose a number: 0-1-2-3");

            option = getIntInput();
            switch (option) {
                case 1:
                    storeMenu();
                    break;
                case 2:
                    updateStoreMenu();
                    break;
                case 3:
                    cartMenu();
                    break;
                case 0:
                    System.out.println("Exit");
                    break;
                default:
                    System.out.println("Error: Invalid option");
            }
        } while (option != 0);
    }

    private static void storeMenu() {
        int option;
        do {
            store.print();
            System.out.println("Options: ");
            System.out.println("--------------------------------");
            System.out.println("1. See a media's details");
            System.out.println("2. Add a media to cart");
            System.out.println("3. Play a media");
            System.out.println("4. See current cart");
            System.out.println("0. Back");
            System.out.println("--------------------------------");
            System.out.println("Please choose a number: 0-1-2-3-4");

            option = getIntInput();
            switch (option) {
                case 1:
                    mediaDetailsMenu();
                    break;
                case 2:
                    handleAddToCart();
                    break;
                case 3:
                    handlePlayMedia(store);
                    break;
                case 4:
                    cartMenu();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("Error: Invalid option");
            }
        } while (true);
    }

    private static void mediaDetailsMenu() {
        Media media = findMedia(store, "Enter the media title (type 0 to cancel): ");
        if (media == null) return;

        System.out.println("Details: ");
        System.out.println(media);

        while (true) {
            System.out.println("Options: ");
            System.out.println("--------------------------------");
            System.out.println("1. Add to cart");
            System.out.println("2. Play");
            System.out.println("0. Back");
            System.out.println("--------------------------------");
            System.out.println("Please choose a number: 0-1-2");

            int option = getIntInput();
            switch (option) {
                case 1:
                    cart.addMedia(media);
                    return;
                case 2:
                    handlePlayMedia(media);
                    return;
                case 0:
                    return;
                default:
                    System.out.println("Error: Invalid option");
            }
        }
    }

    private static void cartMenu() {
        int option;
        do {
            cart.print();
            System.out.println("Options: ");
            System.out.println("--------------------------------");
            System.out.println("1. Filter medias in cart");
            System.out.println("2. Sort medias in cart");
            System.out.println("3. Remove media from cart");
            System.out.println("4. Play a media");
            System.out.println("5. Place order");
            System.out.println("0. Back");
            System.out.println("--------------------------------");
            System.out.println("Please choose a number: 0-1-2-3-4-5");

            option = getIntInput();
            switch (option) {
                case 1:
                    handleFilterCart();
                    break;
                case 2:
                    handleSortCart();
                    break;
                case 3:
                    handleRemoveFromCart();
                    break;
                case 4:
                    handlePlayMedia(store);
                    break;
                case 5:
                    cart.empty();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("Error: Invalid option");
            }
        } while (true);
    }

    private static void updateStoreMenu() {
        int option;
        do {
            System.out.println("Options: ");
            System.out.println("--------------------------------");
            System.out.println("1. Add a media");
            System.out.println("2. Remove a media");
            System.out.println("0. Back");
            System.out.println("--------------------------------");
            System.out.println("Please choose a number: 0-1-2");

            option = getIntInput();
            switch (option) {
                case 1:
                    handleAddMediaToStore();
                    break;
                case 2:
                    handleRemoveFromStore();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("Error: Invalid option");
            }
        } while (true);
    }

    private static Media findMedia(Object source, String prompt) {
        while (true) {
            System.out.println(prompt);
            String title = scanner.nextLine();
            if ("0".equals(title)) return null;
            Media media = (source instanceof Store) ? ((Store)source).search(title) : ((Cart)source).searchToRemove(title);
            if (media != null) return media;
 
            System.out.println("The media does not exist");
        }
    }

    private static void handleAddToCart() {
        Media media = findMedia(store, "Enter the media title (type 0 to cancel): ");
        if (media != null) {
            cart.addMedia(media);
        }
    }

    private static void handlePlayMedia(Object source) {
        Media media = findMedia(source instanceof Store ? (Store)source : store, "Enter the media title (type 0 to cancel): ");
        if (media != null) {
            if (media instanceof Playable) {
                media.play();
            } else {
                System.out.println("This type of media is not supported!");
            }
        }
    }

    private static void handleFilterCart() {
        System.out.println("Filter medias in cart by (1) id or (2) title:");
        int filterOption = getIntInput();

        switch (filterOption) {
            case 1:
                System.out.println("Enter the id to filter:");
                int id = getIntInput();
                cart.searchMediaById(id);
                break;
            case 2:
                System.out.println("Enter the title to filter:");
                String title = scanner.nextLine();
                cart.searchMediaByTitle(title);
                break;
            default:
                System.out.println("Invalid filter option.");
        }
    }

    private static void handleSortCart() {
        System.out.println("Sort medias in cart by (1) title or (2) cost:");
        int sortOption = getIntInput();

        switch (sortOption) {
            case 1:
                cart.sortMediaByTitle();
                break;
            case 2:
                cart.sortMediaByCost();
                break;
            default:
                System.out.println("Invalid sort option.");
        }
    }

    private static void handleRemoveFromCart() {
        Media media = findMedia(cart, "Enter the title of the media (type 0 to stop): ");
        if (media != null) {
            cart.removeMedia(media);
        }
    }

    private static void handleAddMediaToStore() {
        System.out.println("Enter the category of the media (1) Book, (2) CD, (3) DVD or (0) exit:");
        int categoryChoice = getIntInput();

        switch (categoryChoice) {
            case 1:
                addBookToStore();
                break;
            case 2:
                addCDToStore();
                break;
            case 3:
                addDVDToStore();
                break;
            case 0:
                return;
            default:
                System.out.println("Invalid option.");
        }
    }

    private static void addBookToStore() {
        System.out.println("Enter book title: ");
        String bookTitle = scanner.nextLine();
        System.out.println("Enter book category: ");
        String bookCategory = scanner.nextLine();
        System.out.println("Enter book cost: ");
        float bookCost = scanner.nextFloat();
        scanner.nextLine();

        Book newBook = new Book(bookTitle, bookCategory, bookCost);
        store.addMedia(newBook);
    }

    private static void addCDToStore() {
        System.out.println("Enter CD title: ");
        String cdTitle = scanner.nextLine();
        System.out.println("Enter CD category: ");
        String cdCategory = scanner.nextLine();
        System.out.println("Enter CD artist: ");
        String cdArtist = scanner.nextLine();
        System.out.println("Enter CD cost: ");
        float cdCost = scanner.nextFloat();
        scanner.nextLine();

        CompactDisc newCD = new CompactDisc(cdTitle, cdCategory, cdArtist, cdCost);

        System.out.println("Do you want to add tracks to your CD? (1) Yes (0) No:");
        int addTrack = getIntInput();
        
        if (addTrack == 1) {
            System.out.println("How many tracks in your CD?");
            int numTrack = getIntInput();
            
            for (int i = 0; i < numTrack; i++) {
                System.out.println("Your " + (i+1) + " track: ");
                System.out.println("Enter track title: ");
                String trackTitle = scanner.nextLine();
                System.out.println("Enter track length: ");
                int trackLength = getIntInput();

                Track newTrack = new Track(trackTitle, trackLength);
                newCD.addTrack(newTrack);
            }
        }
        store.addMedia(newCD);
    }

    private static void addDVDToStore() {
        System.out.println("Enter DVD title: ");
        String dvdTitle = scanner.nextLine();
        System.out.println("Enter DVD category: ");
        String dvdCategory = scanner.nextLine();
        System.out.println("Enter DVD cost: ");
        float dvdCost = scanner.nextFloat();
        scanner.nextLine();
        
        DigitalVideoDisc newDVD = new DigitalVideoDisc(dvdTitle, dvdCategory, dvdCost);
        store.addMedia(newDVD);
    }

    private static void handleRemoveFromStore() {
        Media media = findMedia(store, "Enter the media title (type 0 to cancel): ");
        if (media != null) {
            store.removeMedia(media);
        }
    }

    private static int getIntInput() {
        int input = scanner.nextInt();
        scanner.nextLine();
        return input;
    }

    private static void initSetup() {
        DigitalVideoDisc dvd1 = new DigitalVideoDisc("The Lion King", "Animation", "Roger Allers", 87, 19.95f);     
        DigitalVideoDisc dvd2 = new DigitalVideoDisc("Star War", "Science Fiction", "George Lucas", 87, 24.95f); 
        DigitalVideoDisc dvd3 = new DigitalVideoDisc("Aladin", "Animation", 18.99f);
        store.addMedia(dvd1);
        store.addMedia(dvd2);
        store.addMedia(dvd3);

        Book book = new Book("The Valley of Fear", "Detective", 20.00f);
        Book book1 = new Book("A Living Remedy: A Memoir", "Biography", 202.00f);
        Book book2 = new Book("On the Origin of Time: Stephen Hawking's Final Theory", "Science", 120.00f);
        store.addMedia(book);
        store.addMedia(book1);
        store.addMedia(book2);

        CompactDisc cd1 = new CompactDisc("Adele - 30", "Music","Adele", 1500.98f);
        cd1.addTrack(new Track("All Night Parking (interlude)", 161));
        cd1.addTrack(new Track("To Be Loved", 403));
        cd1.addTrack(new Track("Woman Like Me", 300));

        CompactDisc cd2 = new CompactDisc("The Gods We Can Touch", "Music","Aurora", 2000.22f);
        cd2.addTrack(new Track("Everything Matters", 214));
        cd2.addTrack(new Track("Blood in the Wine", 210));
        cd2.addTrack(new Track("Artemis", 159));

        CompactDisc cd3 = new CompactDisc("Purpose", "Music","Justin Bieber", 1000.98f);
        cd3.addTrack(new Track("The Feeling", 245));
        cd3.addTrack(new Track("No Sense", 275));

        store.addMedia(cd1);
        store.addMedia(cd2);
        store.addMedia(cd3);
    }
}